var should = require('should');

var http = require('http');
var Uhura = require('uhura');
var tiers = require('../lib/loopbackTiers');
var config = require('../lib/config');
var nf = require('../lib/main');

describe('loopback tiers', function () {

  function verifyDataIntegrity (data) {
    data.should.have.property('loopback_tiers');
    data.loopback_tiers.should.have.property('dao');

    data.loopback_tiers.dao.should.have.property('mean');
    data.loopback_tiers.dao.mean.should.be.a('number');
  }

  // Unit test
  it('should store data in measured', function () {
    // Stub out start and initialize
    var oldStart = tiers.prototype.start;
    tiers.prototype.start = function () {};
    var test = tiers.init();
    tiers.prototype.start = oldStart;

    // Add some data
    test.sample('dao', { ms: Date.now() });

    // Verify data structure is as expected
    var data = test.stats.toJSON();
    verifyDataIntegrity(data);
  });

  // Integration test
  it('should output correctly to collector', function (next) {
    this.timeout(50000);

    // Do some cheating to speed up the test
    config.tiersInterval = 500;

    var loopbackServer;

    // Black hole
    var uhuraServer = Uhura.createServer(function (c) {
      c.on('createSession', function () {
        c.send('newSession', null, {
          sessionId: 'foo'
          , appHash: 'bar'
        });
      });

      function verify (data) {
        nf.stop();
        c.disconnect();

        loopbackServer.close(function () {
          uhuraServer.close(function () {
            verifyDataIntegrity(data);
            next();
          });
        });
      }

      c.on('update', function (data) {
        data.loopback_tiers && data.loopback_tiers.dao && verify(data);
      });
    }).listen(6000, function onListening() {

      // Start profiling
      nf.profile('foo', 'bar', { port: uhuraServer.address().port });

      var loopback = require('loopback');

      var db = loopback.createDataSource({
        connector: loopback.Memory
      });

      // Start an express server and make a request to it
      var Person = loopback.Model.extend('person');
      Person.attachTo(db);

      var request = require('request');

      var app = loopback();

      app.use(loopback.rest());

      app.model(Person);


      // Wrap in http server so it can be closed properly
      loopbackServer = http.createServer(app);
      loopbackServer.listen(7000, function () {
        var port = 7000,
            url = 'http://127.0.0.1:' + port + '/people';
        request(url, function () {});
      });
    });
  }).timeout(1000);

});
